import { parseArgs } from 'util';

type ChainDetails = {
  name: string;
  explorerUrl: string;
}

const chains: {[chainId: string]: ChainDetails } = {
  '8453': {
    name: 'Base',
    explorerUrl: 'https://basescan.org',
  },
  '84532': {
    name: 'Base Sepolia',
    explorerUrl: 'https://sepolia.basescan.org',
  },
  '130': {
    name: 'Unichain',
    explorerUrl: 'https://uniscan.xyz',
  },
  '1301': {
    name: 'Unichain Sepolia',
    explorerUrl: 'https://sepolia.uniscan.xyz/',
  },
  '57073': {
    name: 'Ink',
    explorerUrl: 'https://explorer.inkonchain.com/',
  },
  '763373': {
    name: 'Ink Sepolia',
    explorerUrl: 'https://explorer-sepolia.inkonchain.com/',
  },
};

type Deployment = {
  contractName: string;
  contractAddress: `0x${string}`;
  hash: `0x${string}`;
  arguments: `0x${string}`[];  
};

type Deployments = {
  deployments: Deployment[];
  commit: `0x${string}`;
  timestamp: number;
};

type Tracker = {
  chainId: string;
  history: Deployments[];
};

(async () => {
  const { values } = parseArgs({
    args: Bun.argv,
    options: {
      chainId: {
        type: 'string',
      },
      script: {
        type: 'string',
      },
    },
    strict: true,
    allowPositionals: true,
  });

  // We open the broadcast file generated by Foundry

  const path = `broadcast/${values.script}.s.sol/${values.chainId}/run-latest.json`;
  const file = Bun.file(path);

  const broadcast = await file.json();
  const deployments: Deployment[] = broadcast.transactions.map((transactions: Deployment) => ({
    contractName: transactions.contractName,
    contractAddress: transactions.contractAddress,
    hash: transactions.hash,
    arguments: transactions.arguments,
  }));

  // Then we generate the json file with the deployments history

  const tracker = Bun.file(`deployments/${values.chainId}.json`);
  let trackerContent: Tracker;

  if (await tracker.exists()) {
    trackerContent = await tracker.json();
    trackerContent.history.push({
      deployments,
      commit: broadcast.commit,
      timestamp: broadcast.timestamp,
    });
  } else {
    trackerContent = {
      chainId: values.chainId,
      history: [{
        deployments,
        commit: broadcast.commit,
        timestamp: broadcast.timestamp,
      }],
    };
  }

  await Bun.write(
    `deployments/${values.chainId}.json`,
    JSON.stringify(trackerContent, null, 2),
  );

  // Now we generate the markdown file for the history

  let historyContent = `# Deployments on ${chains[values.chainId].name} (${values.chainId})\n`;

  historyContent += `## Latest deployments\n`;
  historyContent += `| Contract | Address | Transaction | Commit |\n`;
  historyContent += '|---|---|---|---|\n';

  const deployedContracts: {[key: string]: Deployment} = {};

  /*
  trackerContent.history.forEach((deployments) => {
    deployments.deployments.forEach((deployment) => {
      if (!deployedContracts[deployment.contractName]) {
        deployedContracts[deployment.contractName] = deployment;
      } else {
        if (deployedContracts[deployment.contractName].timestamp < deployments.timestamp) {
          deployedContracts[deployment.contractName] = deployment;
        }
      }
    });
  });
  */

  historyContent += `## History\n`;

  trackerContent.history.forEach((deployment) => {
    historyContent += `### ${new Date(deployment.timestamp * 1000).toUTCString()} \n`;
    historyContent += '| Contract | Address | Transaction | Commit |\n';
    historyContent += '|---|---|---|---|\n';
    deployment.deployments.map((d) => {
      historyContent += `| ${d.contractName}`;
      historyContent += ` | [${d.contractAddress}](${chains[values.chainId].explorerUrl}/address/${d.contractAddress})`;
      historyContent += ` | [${d.hash.slice(0, 10)}...](${chains[values.chainId].explorerUrl}/tx/${d.hash})`;
      historyContent += ` | [${deployment.commit.slice(0, 8)}](https://github.com/whetstoneresearch/doppler/commit/${deployment.commit})`;
      historyContent += ` | \n`;      
    });
  });

  await Bun.write(
    `deployments/${values.chainId}.md`,
    historyContent,
  );
})();